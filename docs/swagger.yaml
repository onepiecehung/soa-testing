basePath: /api/v1
definitions:
  dto.CategoryOutput:
    properties:
      id:
        description: Category ID
        example: 1
        type: integer
      name:
        description: Category name
        example: Electronics
        type: string
    type: object
  dto.CreateCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  dto.CreateProductRequest:
    properties:
      categories:
        description: Category IDs
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        minItems: 1
        type: array
      description:
        description: Product description
        example: Advanced smartwatch
        type: string
      name:
        description: Product name
        example: SmartWatch Pro
        type: string
      price:
        description: Product price
        example: 299.99
        type: number
      quantity:
        description: Stock quantity
        example: 100
        minimum: 0
        type: integer
    required:
    - categories
    - name
    - price
    - quantity
    type: object
  dto.CreateReviewRequest:
    properties:
      comment:
        maxLength: 500
        minLength: 1
        type: string
      product_id:
        type: integer
      rating:
        maximum: 5
        minimum: 1
        type: integer
    required:
    - comment
    - product_id
    - rating
    type: object
  dto.LoginRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.ProductResponse:
    properties:
      categories:
        description: Associated categories
        items:
          $ref: '#/definitions/dto.CategoryOutput'
        type: array
      description:
        description: Product description
        example: Advanced smartwatch
        type: string
      id:
        description: Product ID
        example: 1
        type: integer
      name:
        description: Product name
        example: SmartWatch Pro
        type: string
      price:
        description: Product price
        example: 299.99
        type: number
      quantity:
        description: Stock quantity
        example: 100
        type: integer
      status:
        description: Product status
        example: active
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      confirm_password:
        example: password123
        type: string
      email:
        example: john@example.com
        type: string
      full_name:
        example: John Doe
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      role:
        enum:
        - user
        - admin
        example: user
        type: string
      username:
        example: johndoe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - confirm_password
    - email
    - full_name
    - password
    - username
    type: object
  dto.RegisterResponse:
    properties:
      message:
        example: user registered successfully
        type: string
      user:
        $ref: '#/definitions/dto.UserOutput'
    type: object
  dto.ReviewListResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.ReviewResponse'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  dto.ReviewResponse:
    properties:
      comment:
        type: string
      created_at:
        type: string
      id:
        type: integer
      product:
        $ref: '#/definitions/dto.ProductResponse'
      product_id:
        type: integer
      rating:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/dto.UserOutput'
      user_id:
        type: integer
    type: object
  dto.UpdateCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  dto.UpdatePasswordRequest:
    properties:
      confirm_new_password:
        type: string
      current_password:
        type: string
      new_password:
        minLength: 6
        type: string
    required:
    - confirm_new_password
    - current_password
    - new_password
    type: object
  dto.UpdateProductRequest:
    properties:
      categories:
        description: Category IDs
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        minItems: 1
        type: array
      description:
        description: Product description
        example: Updated smartwatch features
        type: string
      name:
        description: Product name
        example: SmartWatch Pro 2
        type: string
      price:
        description: Product price
        example: 349.99
        type: number
      quantity:
        description: Stock quantity
        example: 150
        minimum: 0
        type: integer
      status:
        description: Product status
        enum:
        - active
        - inactive
        - draft
        example: active
        type: string
    required:
    - categories
    - name
    - price
    - quantity
    - status
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      username:
        minLength: 3
        type: string
    type: object
  dto.UpdateUserRoleRequest:
    properties:
      role:
        enum:
        - user
        - admin
        type: string
    required:
    - role
    type: object
  dto.UserOutput:
    properties:
      email:
        example: john@example.com
        type: string
      full_name:
        example: John Doe
        type: string
      id:
        example: 1
        type: integer
      last_login:
        example: "2021-01-01T00:00:00Z"
        type: string
      role:
        enum:
        - user
        - admin
        example: user
        type: string
      username:
        example: johndoe
        type: string
    type: object
  models.Category:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
      updated_at:
        type: string
    type: object
  models.Product:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.Category'
        type: array
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      reviews:
        items:
          $ref: '#/definitions/models.Review'
        type: array
      status:
        $ref: '#/definitions/models.ProductStatus'
      stock_quantity:
        type: integer
      updated_at:
        type: string
      wishlists:
        items:
          $ref: '#/definitions/models.Wishlist'
        type: array
    type: object
  models.ProductStatus:
    enum:
    - active
    - inactive
    - draft
    type: string
    x-enum-varnames:
    - StatusActive
    - StatusInactive
    - StatusDraft
  models.Review:
    properties:
      comment:
        type: string
      created_at:
        type: string
      id:
        type: integer
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: integer
      rating:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Role:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleUser
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      last_login:
        type: string
      reviews:
        description: One-to-many relationship with Review
        items:
          $ref: '#/definitions/models.Review'
        type: array
      role:
        $ref: '#/definitions/models.Role'
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.Wishlist:
    properties:
      added_at:
        type: string
      created_at:
        type: string
      id:
        type: integer
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  types.APIResponse:
    properties:
      data:
        description: Response data
      error:
        description: Error message if success is false
        type: string
      message:
        description: Optional message
        type: string
      success:
        description: Whether the request was successful
        type: boolean
    type: object
  types.ErrorResponse:
    properties:
      code:
        description: Error code for client handling
        type: string
      description:
        description: Detailed error description
        type: string
      error:
        description: Error message
        type: string
    type: object
  types.ProductListResponse:
    properties:
      items:
        description: Override Items with specific type
        items:
          $ref: '#/definitions/models.Product'
        type: array
      page:
        description: Current page number
        type: integer
      page_size:
        description: Number of items per page
        type: integer
      total:
        description: Total number of items
        type: integer
      total_pages:
        description: Total number of pages
        type: integer
    type: object
  types.SuccessResponse:
    properties:
      message:
        description: Success message
        type: string
    type: object
  types.WishlistResponse:
    properties:
      items:
        description: Override Items with specific type
        items:
          $ref: '#/definitions/models.Wishlist'
        type: array
      page:
        description: Current page number
        type: integer
      page_size:
        description: Number of items per page
        type: integer
      total:
        description: Total number of items
        type: integer
      total_pages:
        description: Total number of pages
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A RESTful API for managing products in an online store.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Product Management API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get information of the currently logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Get current user information
      tags:
      - auth
    put:
      consumes:
      - application/json
      description: Update information of the currently logged-in user
      parameters:
      - description: User update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Update user information
      tags:
      - auth
  /auth/password:
    put:
      consumes:
      - application/json
      description: Update the password of the currently logged-in user
      parameters:
      - description: Password update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Update user password
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided information
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /auth/users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users with search and filter options
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 100)'
        in: query
        name: page_size
        type: integer
      - description: Search by username or email
        in: query
        name: search
        type: string
      - description: Filter by role (user/admin)
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: List users
      tags:
      - auth
  /auth/users/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete a user (only admin can do this)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a user
      tags:
      - auth
    get:
      consumes:
      - application/json
      description: Get information of a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Get user information by ID
      tags:
      - auth
  /auth/users/{id}/role:
    put:
      consumes:
      - application/json
      description: Update the role of a user (only admin can do this)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Update user role
      tags:
      - auth
  /categories:
    get:
      consumes:
      - application/json
      description: Get all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: List categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category with name and optional description
      parameters:
      - description: Category details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new category
      tags:
      - categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Get a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Get a category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update an existing category with name and optional description
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a category
      tags:
      - categories
  /categories/{id}/products:
    get:
      consumes:
      - application/json
      description: Get all products in a specific category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Get category products
      tags:
      - categories
  /categories/{id}/products/{productId}:
    delete:
      consumes:
      - application/json
      description: Remove a product from a specific category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Remove product from category
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Add a product to a specific category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Add product to category
      tags:
      - categories
  /categories/distribution:
    get:
      consumes:
      - application/json
      description: Get the distribution of products across categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Get category distribution
      tags:
      - categories
  /products:
    get:
      consumes:
      - application/json
      description: Get a paginated list of products with optional filters
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: page_size
        type: integer
      - description: Filter by category ID
        in: query
        name: categoryId
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - description: Sort field (name, price, created_at)
        in: query
        name: sort
        type: string
      - collectionFormat: csv
        description: Filter by statuses
        in: query
        items:
          type: string
        name: statuses
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ProductListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product with categories
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Get a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product details to update
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a product
      tags:
      - products
  /products/wishlist:
    get:
      consumes:
      - application/json
      description: Get the user's wishlist
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.WishlistResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Get wishlist
      tags:
      - products
  /products/wishlist/{product_id}:
    delete:
      consumes:
      - application/json
      description: Remove a product from the user's wishlist
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Remove from wishlist
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Add a product to the user's wishlist if it's not already added
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Add to wishlist
      tags:
      - products
  /products/wishlist/count:
    get:
      consumes:
      - application/json
      description: Get the total number of wishlist items
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Get total wishlist count
      tags:
      - products
  /reviews:
    post:
      consumes:
      - application/json
      description: Create a new review for a product
      parameters:
      - description: Review data
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/dto.CreateReviewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ReviewResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new review
      tags:
      - reviews
  /reviews/:
    get:
      consumes:
      - application/json
      description: Search reviews with pagination, product name filter, and sorting
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      - description: Product name to filter by
        in: query
        name: product_name
        type: string
      - default: created_at
        description: Field to sort by (created_at, rating)
        in: query
        name: sort_by
        type: string
      - default: desc
        description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReviewListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Search reviews
      tags:
      - reviews
  /reviews/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a review by its ID
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a review
      tags:
      - reviews
    get:
      consumes:
      - application/json
      description: Get a review by its ID
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Review'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Get a review
      tags:
      - reviews
  /reviews/count:
    get:
      consumes:
      - application/json
      description: Get the total number of reviews for all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - Bearer: []
      summary: Get total review count
      tags:
      - reviews
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
